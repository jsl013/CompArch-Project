sim-outorder: SimpleScalar/Alpha Tool Set version 4.0 of December, 2001.
Copyright (C) 2000-2001 by The Regents of The University of Michigan.
Copyright (C) 1994-2001 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
This version of SimpleScalar is licensed for academic non-commercial use only.

sim: command line: ./sim-outorder -config ./config/oo-smt.cfg -smt:nthread 4 -smt:policy mcount -fastfwd 2000000000 -max:inst 1000000000 -redir:sim ./stats/gcc+bzip2_4_mcount_smt.stats ../spec_alpha/gcc/gcc.alpha ../spec_alpha/gcc/gcc_input/166.i -o ../spec_alpha/gcc/gcc_input/166.s + ../spec_alpha/gcc/gcc.alpha ../spec_alpha/gcc/gcc_input/200.i -o ../spec_alpha/gcc/gcc_input/200.s + ../spec_alpha/bzip2/bzip2_base.alpha ../spec_alpha/bzip2/bzip2_input/chicken.jpg 30 + ../spec_alpha/bzip2/bzip2_base.alpha ../spec_alpha/bzip2/bzip2_input/liberty.jpg 30 

sim: simulation started @ Tue Jun 22 05:10:34 2021, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -vr                   false # verbose registers operation
-trigger:inst               0 # trigger instruction for verbose operation
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     ./stats/gcc+bzip2_4_mcount_smt.stats # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-smt:nthread                4 # total number of SMT threads
-smt:policy            mcount # SMT fetch policy option {icount|brcount|mcount}
-max:inst          1000000000 # maximum number of inst's to execute
-fastfwd           2000000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              8 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-fetch:mf_compat        false # optimistic misfetch recovery
-bpred                   comb # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     8192 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               8 # instruction decode B/W (insts/cycle)
-issue:width                8 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width              12 # instruction commit B/W (insts/cycle)
-ruu:size                  32 # register update unit (RUU) size
-lsq:size                  16 # load/store queue (LSQ) size
-lsq:perfect            false # perfect memory disambiguation
-cache:dl1       dl1:2048:64:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               2 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:262144:64:1:l # l2 data cache co/usr/include: Not a directory
/usr/include: Not a directory
nfig, i.e., {<config>|none}
-cache:dl2lat              12 # l2 data cache hit latency (in cycles)
-cache:il1       il1:2048:64:4:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               2 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat              12 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         80 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:128:64:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:128:64:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   6 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                4 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding 2000000000 insts of thread 0 **
sim: ** fast forwarding 2000000000 insts of thread 1 **
sim: ** fast forwarding 2000000000 insts of thread 2 **
sim: ** fast forwarding 2000000000 insts of thread 3 **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn             1000000000 # total number of instructions committed
sim_num_refs              282015927 # total number of loads and stores committed
sim_num_loads             213098511 # total number of loads committed
sim_num_stores         68917416.0000 # total number of stores committed
sim_num_branches          114699737 # total number of branches committed
sim_elapsed_time                407 # total simulation time in seconds
sim_inst_rate          2457002.4570 # simulation speed (in insts/sec)
sim_total_insn           1028456052 # total number of instructions executed
sim_total_refs            294230183 # total number of loads and stores executed
sim_total_loads           221711249 # total number of loads executed
sim_total_stores       72518934.0000 # total number of stores executed
sim_total_branches        117951538 # total number of branches executed
sim_cycle                 177385358 # total simulation time in cycles
sim_IPC                      5.6374 # instructions per cycle
sim_CPI                      0.1774 # cycles per instruction
sim_exec_BW                  5.7979 # total instructions (mis-spec + committed) per cycle
sim_IPB                      8.7184 # instruction per branch
IFQ_count                2521404205 # cumulative IFQ occupancy
IFQ_fcount                256181574 # cumulative IFQ full count
ifq_occupancy               14.2143 # avg IFQ occupancy (insn's)
ifq_rate                     5.7979 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.4516 # avg IFQ occupant latency (cycle's)
ifq_full                     1.4442 # fraction of time (cycle's) IFQ was full
RUU_count               10729598803 # cumulative RUU occupancy
RUU_fcount                256158800 # cumulative RUU full count
ruu_occupancy               60.4875 # avg RUU occupancy (insn's)
ruu_rate                     5.7979 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 10.4327 # avg RUU occupant latency (cycle's)
ruu_full                     1.4441 # fraction of time (cycle's) RUU was full
LSQ_count                3020186619 # cumulative LSQ occupancy
LSQ_fcount                 16498597 # cumulative LSQ full count
lsq_occupancy               17.0261 # avg LSQ occupancy (insn's)
lsq_rate                     5.7979 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.9366 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0930 # fraction of time (cycle's) LSQ was full
sim_slip                14825185829 # total number of slip cycles
avg_sim_slip                14.8252 # the average slip between issue and retirement
misfetch_count                 1477 # misfetch count
misfetch_only_count             521 # misfetch only count
recovery_count              1272522 # recovery count
bpred_comb.lookups        119201466 # total number of bpred lookups
bpred_comb.updates        114699727 # total number of updates
bpred_comb.addr_hits      113428347 # total number of address-predicted hits
bpred_comb.dir_hits       113429521 # total number of direction-predicted hits (includes addr-hits)
bpred_comb.used_bimod      89334698 # total number of bimodal predictions used
bpred_comb.used_2lev       22985506 # total number of 2-level predictions used
bpred_comb.misses           1270206 # total number of misses
bpred_comb.jr_hits           600954 # total number of address-predicted hits for JR's
bpred_comb.jr_seen           601795 # total number of JR's seen
bpred_comb.jr_non_ras_hits.PP           98 # total number of address-predicted hits for non-RAS JR's
bpred_comb.jr_non_ras_seen.PP          443 # total number of non-RAS JR's seen
bpred_comb.bpred_addr_rate    0.9889 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_comb.bpred_dir_rate    0.9889 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_comb.bpred_jr_rate    0.9986 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_comb.bpred_jr_non_ras_rate.PP    0.2212 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_comb.retstack_pushes       838315 # total number of address pushed onto ret-addr stack
bpred_comb.retstack_pops       761159 # total number of address popped off of ret-addr stack
bpred_comb.used_ras.PP       601352 # total number of RAS predictions used
bpred_comb.ras_hits.PP       600856 # total number of RAS hits
bpred_comb.ras_rate.PP    0.9992 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses             1036818235 # total number of accesses
il1.hits                 1036817241 # total number of hits
il1.misses                      994 # total number of misses
il1.replacements                  4 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               92858116 # total number of accesses
dl1.hits                   91676633 # total number of hits
dl1.misses                  1181483 # total number of misses
dl1.replacements            1173291 # total number of replacements
dl1.writebacks              1172477 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0127 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0126 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0126 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                2354954 # total number of accesses
ul2.hits                    2244255 # total number of hits
ul2.misses                   110699 # total number of misses
ul2.replacements              44276 # total number of replacements
ul2.writebacks                41293 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0470 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0188 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0175 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses            1036818235 # total number of accesses
itlb.hits                1036816828 # total number of hits
itlb.misses                    1407 # total number of misses
itlb.replacements               901 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              94438233 # total number of accesses
dtlb.hits                  92010291 # total number of hits
dtlb.misses                 2427942 # total number of misses
dtlb.replacements           2427430 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0257 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0257 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs         182177396 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x01200001e0 # program text (code) segment base
ld_text_size                4295836 # program text (code) size in bytes
ld_data_base           0x01204fc658 # program initialized data segment base
ld_data_size                   8992 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x0000000000 # program stack segment base (highest address in stack)
ld_stack_size            3766484992 # program initial stack size
ld_prog_entry          0x01200001e0 # program entry point (initial PC)
ld_environ_base        0x011f800000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 9795 # total number of pages allocated
mem.page_mem                 78360k # total size of memory pages allocated
mem.ptab_misses              770034 # total first level page table misses
mem.ptab_accesses       14384159978 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate
ld_text_base           0x01200001e0 # program text (code) segment base
ld_text_size                4295836 # program text (code) size in bytes
ld_data_base           0x01204fc658 # program initialized data segment base
ld_data_size                   8992 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x0000000000 # program stack segment base (highest address in stack)
ld_stack_size            3766484992 # program initial stack size
ld_prog_entry          0x01200001e0 # program entry point (initial PC)
ld_environ_base        0x011f800000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 5072 # total number of pages allocated
mem.page_mem                 78360k # total size of memory pages allocated
mem.ptab_misses              691642 # total first level page table misses
mem.ptab_accesses       13850468632 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate
ld_text_base           0x01200001e0 # program text (code) segment base
ld_text_size                 511748 # program text (code) size in bytes
ld_data_base           0x01200ad8c0 # program initialized data segment base
ld_data_size                   5848 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x0000000000 # program stack segment base (highest address in stack)
ld_stack_size            3766484992 # program initial stack size
ld_prog_entry          0x01200001e0 # program entry point (initial PC)
ld_environ_base        0x011f800000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                12081 # total number of pages allocated
mem.page_mem                 78360k # total size of memory pages allocated
mem.ptab_misses               27061 # total first level page table misses
mem.ptab_accesses        9866167069 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate
ld_text_base           0x01200001e0 # program text (code) segment base
ld_text_size                 511748 # program text (code) size in bytes
ld_data_base           0x01200ad8c0 # program initialized data segment base
ld_data_size                   5848 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x0000000000 # program stack segment base (highest address in stack)
ld_stack_size            3766484992 # program initial stack size
ld_prog_entry          0x01200001e0 # program entry point (initial PC)
ld_environ_base        0x011f800000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                12142 # total number of pages allocated
mem.page_mem                 78360k # total size of memory pages allocated
mem.ptab_misses               39392 # total first level page table misses
mem.ptab_accesses        9106941914 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

